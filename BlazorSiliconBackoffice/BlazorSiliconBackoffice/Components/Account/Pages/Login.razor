@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorSiliconBackoffice.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Log in</PageTitle>

<section class="signin-section">
    <div class="container">
        <div class="signin-form">
            <h1 class="header1">Welcome Back</h1>
            <p class="m-text">Don’t have an account yet? <NavLink class="signup-link" href="signup">Sign up here.</NavLink></p>
            <StatusMessage Message="@errorMessage" />
            <EditForm FormName="login" Model="Input" OnValidSubmit="LoginUser" method="post" novalidate>
                <DataAnnotationsValidator />
                <label for="signInEmail">Email</label>
                <ValidationMessage For="@(() => Input.Email)" />
                <InputText @bind-Value="Input.Email" id="signInEmail" type="email" class="userinput" placeholder="Enter your email address" />

                <label for="signInPassword">Password</label>
                <ValidationMessage For="@(() => Input.Password)" />
                <InputText @bind-Value="Input.Password" id="signInPassword" type="password" class="userinput" placeholder="Enter your password" />

                <div class="remember-me">
                    <InputCheckbox @bind-Value="Input.RememberMe" id="rememberMe" type="checkbox" asp-for="SignInModel.RememberMe" />
                    <label for="rememberMe">Remember me</label>
                    <button type="submit" class="btn-theme">Sign in</button>

                    <div class="forgot-password">
                        <NavLink class="signup-link" href="/">Forgot your password?</NavLink>
                    </div>
                </div>

            </EditForm>
        </div>
    </div>
</section>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var user = await UserManager.FindByNameAsync(Input.Email);
        if (user != null)
        {
            if (user.IsAdmin)
            {
                var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
                if (result.Succeeded)
                {
                    await CookieService.GetToken(user.Id, Input.Email);
                    Logger.LogInformation("User logged in.");
                    RedirectManager.RedirectTo(ReturnUrl);
                }
                else if (result.RequiresTwoFactor)
                {
                    RedirectManager.RedirectTo(
                        "Account/LoginWith2fa",
                        new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
                }
                else if (result.IsLockedOut)
                {
                    Logger.LogWarning("User account locked out.");
                    RedirectManager.RedirectTo("Account/Lockout");
                }
                else
                {
                    errorMessage = "Error: Invalid login attempt.";
                }
            }
            else
            {
                errorMessage = "Error: Not authorized";
            }
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
