@using Newtonsoft.Json
@inject NavigationManager NavigationManager

<div class="list">
    <h3>Courses</h3>
    <div class="menu">
        <button class="btn-theme" @onclick="() => ShowCourses()">@buttonText</button>
        @foreach (var course in courseList)
        {
            <button class="@setClass btn-white" @onclick="() => SendMessage(course.Id)">@course.Title</button>
        }
    </div>
</div>


@code {

    private List<CourseCardModel> courseList = new();
    public string setClass = "hide";
    public string buttonText = "Show list of courses";

    public class GraphQLQuery
    {
        public string Query { get; set; } = null!;
    }

    public class RootObject
    {
        public GetCoursesResponse Data { get; set; } = null!;
    }

    public class GetCoursesResponse
    {
        public List<CourseCardModel> GetCourses { get; set; } = null!;
    }

    public class CourseCardModel
    {
        public string Id { get; set; } = null!;
        public string? Title { get; set; }
    }

    [Parameter] 
    public EventCallback<string> OnSendMessage { get; set; }

    private void SendMessage(string id)
    {
        OnSendMessage.InvokeAsync(id);
    }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claims = authenticationState.User;

        var user = await UserManager.GetUserAsync(claims);

        if (HttpContextAccessor.HttpContext!.Request.Cookies.TryGetValue("AccessToken", out var token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
        else
        {
            await CookieService.GetToken(user.Id, user.Email!);
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }

        var query = new GraphQLQuery { Query = "query { getCourses { id title } }" };
        var response = await Http.PostAsJsonAsync("https://courseprovider-silicon-hl.azurewebsites.net/api/graphql?code=7HxNcs9s7LTbK8xSkGVLN9W6v5XDgOJCcj_D31kwYSgGAzFu9L-qMg%3D%3D", query);

        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<RootObject>(jsonString);

            foreach (var course in result!.Data.GetCourses)
            {
                courseList.Add(course);
            }
        }
    }

    public void ShowCourses()
    {
        if (setClass == "")
        {
            setClass = "hide";
            buttonText = "Show list of courses";
        }
        else
        {
            setClass = "";
            buttonText = "Hide list of courses";
        }
    }
}